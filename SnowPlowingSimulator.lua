-- Script generated by SimpleSpy - credits to exx#9394

-- Define global variables
_G.autoNormal = false
_G.autoChallenger = false
_G.openEgg = false
_G.selectedEgg = nil  -- No default egg selected

-- Function to teleport to spawn
function tpToSpawn()
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local rootPart = character:WaitForChild("HumanoidRootPart")

    -- Coordinates for the spawn location
    local spawnPosition = Vector3.new(0, 5, -75)

    -- Teleporting to the spawn position
    rootPart.CFrame = CFrame.new(spawnPosition)
end

-- Function to spawn Challenger
local function spawnChallenger()
    local args = {
        [1] = "14 Challenger",
        [2] = "no"
    }
    game:GetService("ReplicatedStorage").Shop.Events.SpawnCar:FireServer(unpack(args))
end

-- Function to automate snow farming
local function autoSnow()
    while _G.autoNormal do
        -- Loop through all children in HitParts and select the first one
        local hitPart = nil
        for _, part in pairs(game.workspace.HitParts:GetChildren()) do
            if part:IsA("BasePart") then
                hitPart = part
                break
            end
        end

        -- If a hit part is found, fire the event
        if hitPart then
            local args = {
                [1] = hitPart,
                [2] = "Snow8",
                [3] = "MagicWand"
            }
            game:GetService("ReplicatedStorage").Events.e8eGb8RgRXFcug8q:FireServer(unpack(args))
        end
        
        wait(0.01)
    end
end

-- Function to automate Challenger farming
local function autoChallenger()
    while _G.autoChallenger do
        -- Loop through all children in HitParts and select the first one
        local hitPart = nil
        for _, part in pairs(game.workspace.HitParts:GetChildren()) do
            if part:IsA("BasePart") then
                hitPart = part
                break
            end
        end

        -- If a hit part is found, fire the event
        if hitPart then
            local args = {
                [1] = game.workspace:FindFirstChild("14 Challenger"),
                [2] = hitPart,
                [3] = "Snow8"
            }
            game:GetService("ReplicatedStorage").Events.uLg98Wsc4r5QT1hb:FireServer(unpack(args))
        end

        wait(0.01)
    end
end

-- Function to open selected egg
local function openEgg()
    while _G.openEgg do
        local args = {
            [1] = workspace.Eggs:FindFirstChild(_G.selectedEgg)
        }
        game:GetService("ReplicatedStorage").EggSystemRemotes.HatchServer:InvokeServer(unpack(args))
    end
end

-- Load Rayfield
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

-- Create the main UI window
local Window = Rayfield:CreateWindow({
    Name = "Snow Plowing Simulator",
    Icon = 0,
    LoadingTitle = "Snow Plowing Simulator",
    LoadingSubtitle = "by RealDzolat",
    Theme = "Default",

    ConfigurationSaving = {
        Enabled = true,
        FolderName = "SnowPlowingSimulator",
        FileName = "main"
    },

    Discord = {
        Enabled = false,
        Invite = "noinvitelink",
        RememberJoins = true
    },

    KeySystem = false
})

-- Create the AutoSnow tab
local AutoSnow = Window:CreateTab("AutoSnow", "expand")
local TeleportTab = Window:CreateTab("Teleport", "download")
local AutoHatch = Window:CreateTab("AutoHatch", "egg")
local OtherScripts = Window:CreateTab("OtherScripts", "scroll-text")
local Credits = Window:CreateTab("Credits", "wallet-cards")

local Label = Credits:CreateLabel("Made by RealDzolat", "rewind")

local eggOptions = {
    "Basic Egg", "Spotty Egg", "Farm Egg", "Snow Egg", 
    "Golden Farm Egg", "Desert Egg", "Golden Snow Egg", 
    "Swamp Egg", "Golden Desert Egg", "Jungle Egg", 
    "Golden Swamp Egg", "Candy Egg", "Golden Jungle Egg", 
    "Lava Egg", "Golden Candy Egg", "Golden Lava Egg", 
    "Galaxy Egg"
}

local Dropdown = AutoHatch:CreateDropdown({
    Name = "Select Egg",
    Options = eggOptions,
    CurrentOption = nil,  -- No default egg selected
    MultipleOptions = false,
    Flag = "EggSelection", 
    Callback = function(Options)
        _G.selectedEgg = Options[1]  -- Set the selected egg
    end
})

-- Button to hatch selected egg
AutoHatch:CreateToggle({
    Name = "Open Egg",
    CurrentValue = false,
    Flag = "OpenEgg",  -- Flag for configuration saving
    Callback = function(Value)
        _G.openEgg = Value
        if _G.openEgg then
            openEgg()
        end
    end,
})

local function infyield()
loadstring(game:HttpGet("https://raw.githubusercontent.com/edgeiy/infiniteyield/master/source"))()
end
local function ddex()
loadstring(game:HttpGet("https://raw.githubusercontent.com/Cynacol/Dark-Dex-V3/refs/heads/main/Dark%20Dex%20V3.txt"))()
end
local function sspy()
loadstring(game:HttpGet("https://raw.githubusercontent.com/exxtremestuffs/SimpleSpySource/refs/heads/master/SimpleSpy.lua"))()
end
OtherScripts:CreateButton({
    Name = "Infinite Yield",
    Callback = function()
        infyield()
    end,
})

OtherScripts:CreateButton({
    Name = "DarkDex",
    Callback = function()
        ddex()
    end,
})
OtherScripts:CreateButton({
    Name = "SimpleSpy",
    Callback = function()
        sspy()
    end,
})
-- Button to teleport to spawn
TeleportTab:CreateButton({
    Name = "Teleport To Spawn",
    Callback = function()
        tpToSpawn()
    end,
})

-- Toggle for Auto Snow Farm
AutoSnow:CreateToggle({
    Name = "Auto Snow Farm",
    CurrentValue = false,
    Flag = "AutoSnowFarm",
    Callback = function(Value)
        _G.autoNormal = Value
        if _G.autoNormal then
            autoSnow()
        end
    end,
})

-- Button to spawn Challenger
AutoSnow:CreateButton({
    Name = "Spawn Challenger",
    Callback = function()
        spawnChallenger()
    end,
})

-- Toggle for Auto Challenger Farm
AutoSnow:CreateToggle({
    Name = "Auto Challenger Farm",
    CurrentValue = false,
    Flag = "AutoChallengerFarm",
    Callback = function(Value)
        _G.autoChallenger = Value
        if _G.autoChallenger then
            autoChallenger()
        end
    end,
})
